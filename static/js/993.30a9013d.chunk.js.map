{"version":3,"file":"static/js/993.30a9013d.chunk.js","mappings":"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","sources":["components/Box.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/redux/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { color, space, layout, typography, flexbox } from 'styled-system';\n\nexport const Box = styled('div')(color, space, layout, typography, flexbox);\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik, Form, Field } from 'formik';\n\nimport {\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Flex,\n  Box,\n  Heading,\n} from '@chakra-ui/react';\n\nimport {\n  useFetchContactsQuery,\n  useAddContactMutation,\n} from 'components/redux/contactsApi';\n\nimport { Notification, patternName } from 'components/utiles';\n\nconst initialValues = { name: '', number: '' };\n\nconst nameId = nanoid();\nconst numberId = nanoid();\n\nexport const ContactForm = ({ onClose }) => {\n  const [addContact] = useAddContactMutation();\n  const { data } = useFetchContactsQuery();\n\n  const formSubmitHandler = ({ name, number }, { resetForm }) => {\n    const invalidName = data.find(state => state.name === name);\n\n    if (invalidName) {\n      Notification(name);\n      resetForm();\n      return;\n    }\n    addContact({ name, number });\n    onClose();\n    resetForm();\n  };\n  return (\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n      <Box p={2}>\n        <Box textAlign=\"center\">\n          <Heading>Add new contact</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <Formik initialValues={initialValues} onSubmit={formSubmitHandler}>\n            {props => (\n              <Form>\n                <Field name=\"name\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Name</FormLabel>\n                      <Input\n                        {...field}\n                        type=\"text\"\n                        placeholder=\"John Doe\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        pattern={patternName}\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                <Field name=\"number\" patern={patternName} id={numberId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      mt={6}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Nunber</FormLabel>\n                      <Input\n                        {...field}\n                        type=\"telephone\"\n                        placeholder=\"0960000000\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"yellow\"\n                  variant=\"outline\"\n                  width=\"full\"\n                  mt={6}\n                >\n                  Submit\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterTitle = styled.label`\n  margin-bottom: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 400px;\n`;\n","import { Box } from '../Box';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { chatngeFilterValue } from '../redux/filterSlice';\nimport { useState, useEffect } from 'react';\nimport { useDebounce } from 'components/utiles';\n\nimport { FilterInput, FilterTitle } from './Filter.styled';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const [filter, setFilter] = useState('');\n  const debounsedfilterValue = useDebounce(filter, 500);\n\n  useEffect(() => {\n    dispatch(chatngeFilterValue(debounsedfilterValue));\n  }, [debounsedfilterValue, dispatch]);\n\n  const handleFilterChange = e => {\n    setFilter(e.currentTarget.value.toLowerCase());\n  };\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <FilterTitle htmlFor={filterId}>Finde contact by name</FilterTitle>\n      <FilterInput\n        value={filter}\n        type=\"text\"\n        id={filterId}\n        onChange={handleFilterChange}\n      />\n    </Box>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectTextFilter = state => state.filter.value;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  width: 350px;\n  margin: 0;\n  padding: 20px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const DeleteBtn = styled.button`\n  background-color: #d81414;\n  color: white;\n  padding: 5px;\n  border: none;\n  cursor: pointer;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 6px -1px,\n    rgba(0, 0, 0, 0.06) 0px 2px 4px -1px;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectTextFilter } from '../redux/selectors';\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from 'components/redux/contactsApi';\n\nimport { ContactsList, ContactItem, DeleteBtn } from './ContactList.styled';\n\nconst getFilteredContacts = (contacts, filterValue) => {\n  if (filterValue === '') {\n    return contacts;\n  }\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue)\n  );\n};\n\nexport const ContactList = () => {\n  const { data } = useFetchContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n  const filterValue = useSelector(selectTextFilter);\n\n  const visibleContacts = getFilteredContacts(data, filterValue);\n\n  return (\n    <ContactsList>\n      {visibleContacts?.map(({ id, name, number }) => {\n        return (\n          <ContactItem key={id}>\n            <span>&#128241;</span>\n            {name} : {number}\n            <DeleteBtn onClick={() => deleteContact(id)}>Delete</DeleteBtn>\n          </ContactItem>\n        );\n      })}\n    </ContactsList>\n  );\n};\n","import { ToastContainer } from 'react-toastify';\nimport { useFetchContactsQuery } from 'components/redux/contactsApi';\nimport { createPortal } from 'react-dom';\nimport {\n  useDisclosure,\n  Button,\n  // ModalHeader,\n  // Flex,\n  // Spacer,\n  // Link,\n  // Box,\n  // useColorMode,\n} from '@chakra-ui/react';\n\nimport { Container } from 'components/utiles';\nimport { Box } from 'components/Box';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ModalWrap } from 'components/ModalWrap/ModalWrap';\n\nconst ContactsPage = () => {\n  const { error, isLoading } = useFetchContactsQuery();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Container>\n        <Box p=\"10px\">\n          <Button colorScheme=\"teal\" onClick={onOpen}>\n            Add\n          </Button>\n          <h2>Contacts</h2>\n          <Filter />\n          {isLoading && !error && <b>Request in progress...</b>}\n          <ContactList />\n          <ToastContainer autoClose={3000} />\n        </Box>\n        {createPortal(\n          <ModalWrap isOpen={isOpen} onClose={onClose}>\n            <ContactForm onClose={onClose} />\n          </ModalWrap>,\n          document.body\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Box","styled","color","space","layout","typography","flexbox","initialValues","name","number","nameId","nanoid","numberId","ContactForm","onClose","useAddContactMutation","addContact","data","useFetchContactsQuery","width","align","justifyContent","p","textAlign","my","onSubmit","resetForm","find","state","Notification","props","id","field","form","isInvalid","errors","touched","I","type","placeholder","_placeholder","opacity","pattern","patternName","patern","mt","colorScheme","variant","FilterTitle","FilterInput","filterId","Filter","dispatch","useDispatch","useState","filter","setFilter","debounsedfilterValue","useDebounce","useEffect","chatngeFilterValue","display","flexDirection","htmlFor","value","onChange","e","currentTarget","toLowerCase","selectTextFilter","ContactsList","ContactItem","DeleteBtn","ContactList","useDeleteContactMutation","deleteContact","visibleContacts","contacts","filterValue","contact","includes","getFilteredContacts","useSelector","map","onClick","error","isLoading","useDisclosure","isOpen","onOpen","autoClose","createPortal","ModalWrap","document","body"],"sourceRoot":""}