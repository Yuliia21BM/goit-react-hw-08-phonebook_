{"version":3,"file":"static/js/335.c4bedeb2.chunk.js","mappings":"2XAyBMA,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAOJC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAEJE,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAON,EAAP,KAAeQ,EAAf,KAOA,GAAqBC,EAAAA,EAAAA,MAAdC,GAAP,eACQC,GAASC,EAAAA,EAAAA,MAATD,KAeR,OACE,SAAC,IAAD,CAAME,MAAM,OAAOC,MAAM,SAASC,eAAe,SAAjD,UACE,UAAC,KAAD,CAAKC,EAAG,EAAR,WACE,SAAC,KAAD,CAAKC,UAAU,SAAf,UACE,SAAC,IAAD,iCAEF,SAAC,KAAD,CAAKC,GAAI,EAAGD,UAAU,OAAtB,UACE,SAAC,KAAD,CAAQnB,cAAeA,EAAeqB,SApBpB,SAACC,EAAD,GAAuB,IAAjBC,EAAgB,EAAhBA,UAI9B,GAHAC,QAAQC,IAAIxB,EAAMC,GACEW,EAAKa,MAAK,SAAAC,GAAK,OAAIA,EAAM1B,OAASA,CAAnB,IAKjC,OAFA2B,EAAAA,EAAAA,IAAa3B,QACbsB,IAGFX,EAAW,CAAEX,KAAAA,EAAMC,OAAAA,IACnBK,IACAgB,GACD,EAQO,SACG,SAAAM,GAAK,OACJ,UAAC,KAAD,YACE,SAAC,KAAD,CAAO5B,KAAK,OAAO6B,GAAI3B,EAAvB,SACG,gBAAG4B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,YAAU,EACVC,UAAWF,EAAKG,OAAOlC,MAAQ+B,EAAKI,QAAQnC,KAF9C,WAIE,SAAC,IAAD,oBACA,SAAC,EAAAoC,GAAD,kBACMN,GADN,IAEEO,MAAOrC,EACPsC,KAAK,OACLC,YAAY,WACZC,aAAc,CAAEC,QAAS,EAAGC,MAAO,YACnCC,QAASC,EAAAA,GACTC,SAAU,SAAAC,GAAC,OAAItC,EAAQsC,EAAEC,OAAOV,MAArB,MAEb,SAAC,KAAD,UAAmBN,EAAKG,OAAOlC,SAflC,KAmBH,SAAC,KAAD,CAAOA,KAAK,SAASgD,OAAQJ,EAAAA,GAAaf,GAAIzB,EAA9C,SACG,gBAAG0B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,YAAU,EACViB,GAAI,EACJhB,UAAWF,EAAKG,OAAOlC,MAAQ+B,EAAKI,QAAQnC,KAH9C,WAKE,SAAC,IAAD,sBACA,SAAC,EAAAoC,GAAD,kBACMN,GADN,IAEEO,MAAOpC,EACPqC,KAAK,YACLC,YAAY,aACZC,aAAc,CAAEC,QAAS,EAAGC,MAAO,YACnCC,QAAQ,yFACRE,SAAU,SAAAC,GAAC,OAAIrC,EAAUqC,EAAEC,OAAOV,MAAvB,MAEb,SAAC,KAAD,UAAmBN,EAAKG,OAAOlC,SAhBlC,KAqGH,SAAC,IAAD,CACEsC,KAAK,SACLY,YAAY,SACZC,QAAQ,UACRrC,MAAM,OACNmC,GAAI,EALN,sBA5HE,UA4IjB,E,8BC1MKG,GAAWjD,EAAAA,EAAAA,MAEJkD,EAAS,WACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BhD,EAAAA,EAAAA,UAAS,IAArC,eAAOiD,EAAP,KAAeC,EAAf,KACMC,GAAuBC,EAAAA,EAAAA,IAAYH,EAAQ,MAEjDI,EAAAA,EAAAA,YAAU,WACRN,GAASO,EAAAA,EAAAA,GAAmBH,GAC7B,GAAE,CAACA,EAAsBJ,IAK1B,OACE,UAAC,KAAD,CAAKQ,QAAQ,OAAOC,cAAc,SAAlC,WACE,SAAC,IAAD,CAAMC,SAAS,KAAKC,GAAG,OAAOC,GAAG,OAAjC,oCAGA,SAAC,EAAA9B,EAAD,CACEe,QAAQ,UACRZ,YAAY,WACZC,aAAc,CAAEC,QAAS,EAAGC,MAAO,YACnC5B,MAAM,QACNuB,MAAOmB,EACPlB,KAAK,OACLT,GAAIuB,EACJP,SAhBqB,SAAAC,GACzBW,EAAUX,EAAEqB,cAAc9B,MAAM+B,cACjC,MAkBF,ECrCYC,EAAmB,SAAA3C,GAAK,OAAIA,EAAM8B,OAAOnB,KAAjB,E,oBCiBxBiC,EAAc,WACzB,IAAQ1D,GAASC,EAAAA,EAAAA,MAATD,KACR,GAAwB2D,EAAAA,EAAAA,MAAjBC,GAAP,eAGMC,EAdoB,SAACC,EAAUC,GACrC,MAAoB,KAAhBA,EACKD,EAEFA,EAASlB,QAAO,SAAAoB,GAAO,OAC5BA,EAAQ5E,KAAKoE,cAAcS,SAASF,EADR,GAG/B,CAOyBG,CAAoBlE,GAFxBmE,EAAAA,EAAAA,IAAYV,IAIhC,OACE,SAAC,KAAD,CAAKpD,EAAE,OAAO+D,GAAG,OAAjB,UACE,SAAC,IAAD,CAAMC,IAAK,OAAQlB,cAAc,SAAjC,gBACGU,QADH,IACGA,OADH,EACGA,EAAiBS,KAAI,YAA2B,IAAxBrD,EAAuB,EAAvBA,GAAI7B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACjC,OACE,UAAC,IAAD,CAAekF,WAAW,SAASnE,eAAgB,gBAAnD,WACE,SAAC,IAAD,CAAQhB,KAAMA,EAAMkD,YAAY,UAAUkC,KAAK,QAC/C,UAAC,IAAD,CAAMpB,SAAS,KAAKE,GAAG,OAAvB,UACG,IACAlE,EAFH,QAIA,UAAC,IAAD,CAAMgE,SAAS,KAAf,cAAsB/D,MACtB,UAAC,IAAD,CAAMgF,IAAK,OAAX,WACE,SAAC,IAAD,CACE/B,YAAY,MACZC,QAAQ,UACRkC,QAAS,kBAAMb,EAAc3C,EAApB,EAHX,qBAOA,SAAC,IAAD,CAAQsB,QAAQ,UAAUD,YAAY,SAAtC,UACE,SAAC,MAAD,WAhBKrB,EAqBd,OAIR,E,oBClCKyD,EAAYC,SAASC,cAAc,eAuCzC,EArCqB,WACnB,OAA6B3E,EAAAA,EAAAA,MAArB4E,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UACf,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQvF,EAAxB,EAAwBA,QAExB,OACE,+BACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAKW,EAAE,OAAO6E,SAAS,WAAvB,WACE,SAAC,IAAD,CACE3C,QAAQ,UACR2C,SAAU,WACVC,IAAI,OACJC,MAAO,OACP9C,YAAY,OACZmC,QAASQ,EACTT,KAAK,KAPP,UASE,SAAC,MAAD,CAAYa,iBAAkB,OAAQb,KAAK,aAE7C,SAAC,IAAD,CAAMpE,eAAgB,SAAtB,UACE,SAACqC,EAAD,MAEDqC,IAAcD,IAAS,mDACxB,SAACnB,EAAD,KACA,SAAC,KAAD,CAAgB4B,UAAW,UAE5BC,EAAAA,EAAAA,eACC,SAACC,EAAA,EAAD,CAAWR,OAAQA,EAAQtF,QAASA,EAApC,UACE,SAACD,EAAD,CAAaC,QAASA,MAExBgF,OAKT,C","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/redux/selectors.js","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik, Form, Field } from 'formik';\nimport { useState } from 'react';\n\nimport {\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Flex,\n  Box,\n  Heading,\n  // Select,\n  // Textarea,\n} from '@chakra-ui/react';\n\nimport {\n  useFetchContactsQuery,\n  useAddContactMutation,\n} from 'components/redux/contactsApi';\n\nimport { Notification, patternName } from 'components/utiles';\n\nconst initialValues = {\n  name: '',\n  number: '',\n  // email: '',\n  // birthday: new Date().toISOString().split('T')[0],\n  // avatar: 'default',\n  // description: '',\n};\n\nconst nameId = nanoid();\nconst numberId = nanoid();\n\nexport const ContactForm = ({ onClose }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  // const [email, setEmail] = useState('');\n  // const [birthday, setBirthday] = useState(\n  //   new Date().toISOString().split('T')[0]\n  // );\n  // const [avatar, setAvatar] = useState('default');\n  // const [description, setDescription] = useState('');\n  const [addContact] = useAddContactMutation();\n  const { data } = useFetchContactsQuery();\n\n  const formSubmitHandler = (_, { resetForm }) => {\n    console.log(name, number);\n    const invalidName = data.find(state => state.name === name);\n\n    if (invalidName) {\n      Notification(name);\n      resetForm();\n      return;\n    }\n    addContact({ name, number });\n    onClose();\n    resetForm();\n  };\n  return (\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n      <Box p={2}>\n        <Box textAlign=\"center\">\n          <Heading>Add new contact</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <Formik initialValues={initialValues} onSubmit={formSubmitHandler}>\n            {props => (\n              <Form>\n                <Field name=\"name\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      isRequired\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Name</FormLabel>\n                      <Input\n                        {...field}\n                        value={name}\n                        type=\"text\"\n                        placeholder=\"John Doe\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        pattern={patternName}\n                        onChange={e => setName(e.target.value)}\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                <Field name=\"number\" patern={patternName} id={numberId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      isRequired\n                      mt={4}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Nunber</FormLabel>\n                      <Input\n                        {...field}\n                        value={number}\n                        type=\"telephone\"\n                        placeholder=\"0960000000\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        onChange={e => setNumber(e.target.value)}\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n\n                {/* <Field name=\"email\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      mt={4}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Email</FormLabel>\n                      <Input\n                        {...field}\n                        value={email}\n                        type=\"text\"\n                        placeholder=\"test@test.com\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        onChange={e => setEmail(e.target.value)}\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n\n                <Field name=\"name\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      mt={4}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Birthday</FormLabel>\n                      <Input\n                        {...field}\n                        value={birthday}\n                        max={new Date().toISOString().split('T')[0]}\n                        placeholder=\"Select Date and Time\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        size=\"md\"\n                        type=\"date\"\n                        onChange={e => setBirthday(e.target.value)}\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                <Field name=\"name\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      mt={4}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Avatar</FormLabel>\n                      <Select\n                        {...field}\n                        value={avatar}\n                        onChange={e => setAvatar(e.target.value)}\n                      >\n                        <option value=\"default\">default</option>\n                        <option value=\"cat\">cat</option>\n                        <option value=\"haurt\">haurt</option>\n                      </Select>\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                <Field name=\"name\" id={nameId}>\n                  {({ field, form }) => (\n                    <FormControl\n                      mt={4}\n                      isInvalid={form.errors.name && form.touched.name}\n                    >\n                      <FormLabel>Description</FormLabel>\n                      <Textarea\n                        {...field}\n                        value={description}\n                        onChange={e => setDescription(e.target.value)}\n                        placeholder=\"Here you can write some description\"\n                        _placeholder={{ opacity: 1, color: 'teal.700' }}\n                        size=\"sm\"\n                      />\n                      <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field> */}\n                <Button\n                  type=\"submit\"\n                  colorScheme=\"yellow\"\n                  variant=\"outline\"\n                  width=\"full\"\n                  mt={6}\n                >\n                  Submit\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n      </Box>\n    </Flex>\n  );\n};\n","// import { Box } from '../Box';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { chatngeFilterValue } from '../redux/filterSlice';\nimport { useState, useEffect } from 'react';\nimport { useDebounce } from 'components/utiles';\nimport { Box, Text, Input } from '@chakra-ui/react';\n\nconst filterId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const [filter, setFilter] = useState('');\n  const debounsedfilterValue = useDebounce(filter, 500);\n\n  useEffect(() => {\n    dispatch(chatngeFilterValue(debounsedfilterValue));\n  }, [debounsedfilterValue, dispatch]);\n\n  const handleFilterChange = e => {\n    setFilter(e.currentTarget.value.toLowerCase());\n  };\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Text fontSize=\"xl\" mb=\"10px\" as=\"cite\">\n        Finde contact by name\n      </Text>\n      <Input\n        variant=\"flushed\"\n        placeholder=\"John Doe\"\n        _placeholder={{ opacity: 1, color: 'teal.700' }}\n        width=\"400px\"\n        value={filter}\n        type=\"text\"\n        id={filterId}\n        onChange={handleFilterChange}\n      />\n    </Box>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectTextFilter = state => state.filter.value;\n","import { useSelector } from 'react-redux';\nimport { selectTextFilter } from '../redux/selectors';\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from 'components/redux/contactsApi';\n\nimport { RiEditLine } from 'react-icons/ri';\nimport { Avatar, Box, Button, Flex, Text } from '@chakra-ui/react';\n\nconst getFilteredContacts = (contacts, filterValue) => {\n  if (filterValue === '') {\n    return contacts;\n  }\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterValue)\n  );\n};\n\nexport const ContactList = () => {\n  const { data } = useFetchContactsQuery();\n  const [deleteContact] = useDeleteContactMutation();\n  const filterValue = useSelector(selectTextFilter);\n\n  const visibleContacts = getFilteredContacts(data, filterValue);\n\n  return (\n    <Box p=\"10px\" pt=\"40px\">\n      <Flex gap={'20px'} flexDirection=\"column\">\n        {visibleContacts?.map(({ id, name, number }) => {\n          return (\n            <Flex key={id} alignItems=\"center\" justifyContent={'space-between'}>\n              <Avatar name={name} colorScheme=\"twitter\" size=\"md\" />\n              <Text fontSize=\"xl\" as=\"cite\">\n                {' '}\n                {name}:\n              </Text>\n              <Text fontSize=\"xl\"> {number}</Text>\n              <Flex gap={'20px'}>\n                <Button\n                  colorScheme=\"red\"\n                  variant=\"outline\"\n                  onClick={() => deleteContact(id)}\n                >\n                  Delete\n                </Button>\n                <Button variant=\"outline\" colorScheme=\"yellow\">\n                  <RiEditLine />\n                </Button>\n              </Flex>\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n","import { ToastContainer } from 'react-toastify';\nimport { useFetchContactsQuery } from 'components/redux/contactsApi';\nimport { createPortal } from 'react-dom';\nimport {\n  useDisclosure,\n  Button,\n  // ModalHeader,\n  // Flex,\n  // Spacer,\n  // Link,\n  Box,\n  Flex,\n  // useColorMode,\n} from '@chakra-ui/react';\n\nimport { Container } from 'components/utiles';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ModalWrap } from 'components/ModalWrap/ModalWrap';\nimport { TbUserPlus } from 'react-icons/tb';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst ContactsPage = () => {\n  const { error, isLoading } = useFetchContactsQuery();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Container>\n        <Box p=\"10px\" position=\"relative\">\n          <Button\n            variant=\"outline\"\n            position={'absolute'}\n            top=\"20px\"\n            right={'95px'}\n            colorScheme=\"teal\"\n            onClick={onOpen}\n            size=\"lg\"\n          >\n            <TbUserPlus enableBackground={'teal'} size=\"1.3em\" />\n          </Button>\n          <Flex justifyContent={'center'}>\n            <Filter />\n          </Flex>\n          {isLoading && !error && <b>Request in progress...</b>}\n          <ContactList />\n          <ToastContainer autoClose={3000} />\n        </Box>\n        {createPortal(\n          <ModalWrap isOpen={isOpen} onClose={onClose}>\n            <ContactForm onClose={onClose} />\n          </ModalWrap>,\n          modalRoot\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["initialValues","name","number","nameId","nanoid","numberId","ContactForm","onClose","useState","setName","setNumber","useAddContactMutation","addContact","data","useFetchContactsQuery","width","align","justifyContent","p","textAlign","my","onSubmit","_","resetForm","console","log","find","state","Notification","props","id","field","form","isRequired","isInvalid","errors","touched","I","value","type","placeholder","_placeholder","opacity","color","pattern","patternName","onChange","e","target","patern","mt","colorScheme","variant","filterId","Filter","dispatch","useDispatch","filter","setFilter","debounsedfilterValue","useDebounce","useEffect","chatngeFilterValue","display","flexDirection","fontSize","mb","as","currentTarget","toLowerCase","selectTextFilter","ContactList","useDeleteContactMutation","deleteContact","visibleContacts","contacts","filterValue","contact","includes","getFilteredContacts","useSelector","pt","gap","map","alignItems","size","onClick","modalRoot","document","querySelector","error","isLoading","useDisclosure","isOpen","onOpen","position","top","right","enableBackground","autoClose","createPortal","ModalWrap"],"sourceRoot":""}